plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id "jacoco"
	id "org.sonarqube" version "4.4.1.3373"
}
def customJacocoReportDir = 'jacoco/reports'

group = 'com.synced.domain'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

jacoco {
	toolVersion = '0.8.11'
}

jacocoTestReport {
	reports {
		html.required.set(true)
		html.outputLocation.set(layout.buildDirectory.dir("$customJacocoReportDir/html"))

		xml.required.set(true)
		xml.outputLocation.set(layout.buildDirectory.file("$customJacocoReportDir/xml/jacoco.xml"))

		csv.required.set(true)
		csv.outputLocation.set(layout.buildDirectory.file("$customJacocoReportDir/csv/jacoco.csv"))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.0
			}
		}
	}
}
sonarqube {
	properties {
		property "sonar.projectKey", "syncd"
		property "sonar.projectName", "syncd"

		property "sonar.modules", subprojects.collect { it.name }.join(',')
		subprojects.forEach { subproject ->
			property "sonar.${subproject.name}.coverage.jacoco.xmlReportPaths", "${subproject.layout.buildDirectory.get()}/$customJacocoReportDir/xml/jacoco.xml"
		}
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	testImplementation 'io.projectreactor:reactor-test'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final' // if you are using mapstruct in test code
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	//sentry
	implementation 'io.sentry:sentry-spring-boot-starter-jakarta:7.9.0'

	// jjwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	//gmail
	implementation group: 'jakarta.mail', name: 'jakarta.mail-api', version: '2.1.2'
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	implementation("org.springframework.retry:spring-retry")
	implementation 'org.aspectj:aspectjrt:1.9.7'
	implementation 'org.aspectj:aspectjweaver:1.9.7'

	//s3
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	//validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'
}

test {
//	dependsOn loadDotEnvFile
	finalizedBy jacocoTestReport, jacocoTestCoverageVerification
	useJUnitPlatform()
//	systemProperties System.getProperties()
}


tasks.named('test') {
	useJUnitPlatform()
}