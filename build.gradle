plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id "jacoco"
	id "org.sonarqube" version "4.4.1.3373"
}
def customJacocoReportDir = 'jacoco/reports'

group = 'com.synced.domain'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

jacoco {
	toolVersion = '0.8.11'
}

jacocoTestReport {
	reports {
		html.required.set(true)
		html.outputLocation.set(layout.buildDirectory.dir("$customJacocoReportDir/html"))

		xml.required.set(true)
		xml.outputLocation.set(layout.buildDirectory.file("$customJacocoReportDir/xml/jacoco.xml"))

		csv.required.set(true)
		csv.outputLocation.set(layout.buildDirectory.file("$customJacocoReportDir/csv/jacoco.csv"))
	}
}

jacocoTestReport {
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: [
							'com/syncd/dto/**',
							'com/syncd/enums/**',
							'com/syncd/adapter/in/web/WebConfig.java',
							'com/syncd/adapter/out/persistence/MongoConfig.java',
					])
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.0
			}
		}
	}
}
sonarqube {
	properties {
		property "sonar.projectKey", "syncd"
		property "sonar.projectName", "syncd"
		property "sonar.modules", subprojects.collect { it.name }.join(',')
		subprojects.forEach { subproject ->
			property "sonar.${subproject.name}.coverage.jacoco.xmlReportPaths", "${subproject.layout.buildDirectory.get()}/$customJacocoReportDir/xml/jacoco.xml"
		}
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final' // if you are using mapstruct in test code

	// 테스트
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
	testImplementation 'org.mockito:mockito-core:3.3.3'
	testImplementation 'org.mockito:mockito-junit-jupiter:3.3.3'

	testImplementation 'org.assertj:assertj-core:3.19.0'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
//	dependsOn loadDotEnvFile
	finalizedBy jacocoTestReport, jacocoTestCoverageVerification
	useJUnitPlatform()
//	systemProperties System.getProperties()
}


tasks.named('test') {
	useJUnitPlatform()

	testLogging {
		events 'PASSED', 'FAILED', 'SKIPPED'
		showStandardStreams = true // Show output from System.out and System.err
		exceptionFormat 'full'     // Show full stack traces for exceptions
	}

	outputs.upToDateWhen { false }
}